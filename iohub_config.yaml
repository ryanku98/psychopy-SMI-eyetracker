# Original author: @psychopy
# Contributing author: @ryanku98
monitor_devices:
    # Video output device
    - Display:
        name: Display
        reporting_unit_type: pix
        device_number: 1
        # Physical dimensions of display monitor being used
        physical_dimensions:
            width: 1600
            height: 900
            # Unit used to specify dimensions
            unit_type: mm
        # Distance from eye to monitor
        default_eye_distance:
            surface_center: 770
            # Unit used to specify distance
            unit_type: mm
        psychopy_monitor_name: default
    # Keyboard input
    - Keyboard:
        name: Keyboard
    # Mouse input
    - Mouse:
        name: mouse
    - Experiment:
        name: experimentRuntime

    # iViewX eyetracker config
    - eyetracker.hw.smi.iviewx.EyeTracker:
        # Load device during experiment runtime
        enable: True
        # Variable name to address tracker during runtime
        name: tracker
        # Save eyetracker events to ioHub DataStore file when recording data
        save_events: True
        # Send eyetracker events to the Experiment process when recording data
        stream_events: True
        # Number of eyetracker events (including samples) to be saved in ioHub event buffer before being replaced with new events
        event_buffer_length: 1024
        # The iViewX implementation only supports BinocularEyeSampleEvent
        monitor_event_types: [BinocularEyeSampleEvent]
        # Popular single PC config.
        # If tracker is on another PC, adjust network settings accordingly
        network_settings:
            send_ip_address: 127.0.0.1
            # Port being used by iView X SDK for sending data to iView X
            send_port: 4444
            # IP address of local computer
            receive_ip_address: 127.0.0.1
            # port being used by iView X SDK for receiving data from iView X
            receive_port: 5555
        runtime_settings:
            # Sampling rate of eyetracker (in HZ)
            sampling_rate: 120
            # iViewX supports: LEFT_EYE, RIGHT_EYE, BINOCULAR, BINOCULAR_AVERAGED
            track_eyes: BINOCULAR_AVERAGED
            # Sample filtering
            # iViewX supports: FILTER_OFF, FILTER_ON
            sample_filtering:
                FILTER_ALL: FILTER_OFF
            # VOG settings allow you to specify some eye tracker parameters related to the image processing or data collection procedure used by the eye device.
            vog_settings:
                # Used for any eyes being tracked
                # iViewX supports: PUPIL_AREA, PUPIL_DIAMETER
                pupil_measure_types: PUPIL_DIAMETER
        calibration:
            # iViewX supports the following calibration type constants:
            type: FIVE_POINTS
            # Auto pace refers to automatic progress from one calibration point to the next
            # If No, manual key press is needed to progress
            auto_pace: Yes
            # Length of time calibration point is displayed before next point is shown when auto_pace --> Yes; ignored otherwise
            pacing_speed: FAST
            # Greyscale value from 0 ~ 255 --> specifies brightness of calibration screen
            screen_background_color: 20
            # Calibration target types
            # iViewX supports: CIRCLE_TARGET, CROSSHAIR_TARGET, IMAGE_TARGET
            target_type: CIRCLE_TARGET
            # Associated target attributes
            target_attributes:
                target_size: 30
                target_color: 239
                target_inner_color: RED
            # Show validation accuracy window overlay after validation procedure
            show_validation_accuracy_window: True
        # Current iViewX models include: RED, REDm, HiSpeed, MRI, HED, ETG, or Custom
        model_name: REDm

data_store:
    enable: True
    # Needed for PsychoPy to differentiate experiments
    experiment_info:
        # Title may be anything you want
        title: I just want this to work
    session_info:
        code: Please_work
